import os
from dotenv import load_dotenv
import resend
from datetime import datetime

load_dotenv()

def format_analysis_content(analysis_json):
    """
    Process the JSON analysis response into structured HTML sections.
    
    Args:
        analysis_json: The JSON analysis response from the AI
        
    Returns:
        str: Formatted HTML content with proper sections and styling
    """
    import json
    
    # If analysis_json is a string (JSON string), convert to dict
    if isinstance(analysis_json, str):
        try:
            analysis_data = json.loads(analysis_json)
        except json.JSONDecodeError:
            # Fallback for non-JSON responses
            return f"<div class='section'><p>{analysis_json}</p></div>"
    else:
        analysis_data = analysis_json
    
    # Ensure expected keys are present
    expected_sections = {
        "job_description": "Job Description",
        "strength": "Strengths",
        "weakness": "Weaknesses", 
        "changes_needed": "Changes Needed",
        "overall_summary": "Overall Summary"
    }
    
    formatted_content = ""
    
    # Map JSON sections to expected section classes for CSS styling
    section_class_map = {
        "job_description": "job-description",
        "strength": "strength",
        "weakness": "weakness",
        "changes_needed": "changes",
        "overall_summary": "summary"
    }
    
    # Process each section
    for key, title in expected_sections.items():
        section_class = section_class_map.get(key, "section")
        
        # Get content or default to empty list
        content = analysis_data.get(key, [])
        
        if key == "job_description" and isinstance(content, str):
            # Job description might be a string, not a list
            section_html = f"<p>{content}</p>"
        else:
            # For list content, convert to bullet points
            if isinstance(content, list) and content:
                section_html = "<ul>\n" + "\n".join([f"<li>{item}</li>" for item in content]) + "\n</ul>"
            elif isinstance(content, str) and content:
                # If content is a string, wrap it in paragraph
                section_html = f"<p>{content}</p>"
            else:
                section_html = "<p>No specific information provided.</p>"
        
        # Add the section to formatted content
        formatted_content += f"""
        <div class="section {section_class}">
            <h2>{title}</h2>
            {section_html}
        </div>
        """
    
    return formatted_content

def send_resume_analysis_email(recipient_email: str, analysis_result: str, job_role: str):
    """
    Send an email with the resume analysis results.
    
    Args:
        recipient_email: The email address to send the results to
        analysis_result: The analysis data generated by the AI (JSON format)
        job_role: The job role the user applied for
    
    Returns:
        dict: The response from the email API
    """
    try:
        import json
        
        resend_api_key = os.getenv("RESEND_API_KEY")
        if not resend_api_key:
            print("Error: RESEND_API_KEY environment variable not set")
            return {"error": "Email configuration missing"}
        
        # Set API key globally
        resend.api_key = resend_api_key
        
        # Parse the analysis result if it's a JSON string
        if isinstance(analysis_result, str):
            try:
                analysis_data = json.loads(analysis_result)
            except json.JSONDecodeError:
                # If not valid JSON, create a simple structure with the text as overall_summary
                analysis_data = {
                    "job_description": job_role,
                    "strength": [],
                    "weakness": [],
                    "changes_needed": [],
                    "overall_summary": analysis_result
                }
        else:
            analysis_data = analysis_result
        
        # Process the analysis result to better structure the content
        processed_analysis = format_analysis_content(analysis_data)
        
        # Format email content with enhanced styling and structure
        formatted_html = f"""
        <html>
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <style>
                    body {{
                        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                        line-height: 1.6;
                        color: #333;
                        max-width: 800px;
                        margin: 0 auto;
                        padding: 20px;
                        background-color: #f9f9f9;
                    }}
                    .container {{
                        background-color: #ffffff;
                        border-radius: 8px;
                        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                        padding: 30px;
                        margin-bottom: 20px;
                    }}
                    h1 {{
                        color: #2c3e50;
                        text-align: center;
                        border-bottom: 2px solid #4285f4;
                        padding-bottom: 15px;
                        margin-bottom: 25px;
                    }}
                    h2 {{
                        color: #2c3e50;
                        margin-top: 25px;
                        padding-bottom: 10px;
                        border-bottom: 1px solid #e0e0e0;
                    }}
                    h3 {{
                        color: #4285f4;
                        margin-top: 20px;
                    }}
                    .job-role {{
                        background-color: #f0f7ff;
                        padding: 15px;
                        border-radius: 6px;
                        border-left: 4px solid #4285f4;
                        margin-bottom: 25px;
                        font-size: 18px;
                    }}
                    .job-description {{
                        background-color: #e8f5e9;
                        border-left: 4px solid #4caf50;
                    }}
                    .section {{
                        margin-bottom: 25px;
                        padding: 15px 20px;
                        background-color: #fafafa;
                        border-radius: 6px;
                    }}
                    .strength {{
                        background-color: #e8f5e9;
                        border-left: 4px solid #4caf50;
                    }}
                    .weakness {{
                        background-color: #fff8e1;
                        border-left: 4px solid #ffc107;
                    }}
                    .changes {{
                        background-color: #e3f2fd;
                        border-left: 4px solid #2196f3;
                    }}
                    .summary {{
                        background-color: #f3e5f5;
                        border-left: 4px solid #9c27b0;
                    }}
                    .footer {{
                        margin-top: 30px;
                        padding-top: 20px;
                        border-top: 1px solid #eee;
                        font-size: 13px;
                        color: #777;
                        text-align: center;
                    }}
                    ul {{
                        padding-left: 20px;
                        margin-top: 10px;
                        margin-bottom: 10px;
                    }}
                    li {{
                        margin-bottom: 10px;
                        padding-left: 5px;
                    }}
                    .highlight {{
                        font-weight: bold;
                        color: #4285f4;
                    }}
                    @media (max-width: 600px) {{
                        .container {{
                            padding: 15px;
                        }}
                    }}
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>Resume Analysis Report</h1>
                    <div class="job-role">
                        <strong>Job Role Applied For:</strong> {job_role}
                    </div>
                    
                    {processed_analysis}
                    
                    <div class="footer">
                        This is an automated email. Please do not reply to this message.<br>
                        Â© "Resume Analyzer" {datetime.now().year}
                    </div>
                </div>
            </body>
        </html>
        """
        
        # Send email using correct Resend API structure
        params = {
            "from": "Resume Analysis <no-reply@lnbg.in>",
            "to": recipient_email,
            "subject": f"Resume Analysis Report for {job_role} Position",
            "html": formatted_html
        }
        response = resend.Emails.send(params) # type: ignore
        
        return response
    except Exception as e:
        print(f"Error sending email: {e}")
        return {"error": str(e)}
